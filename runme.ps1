Write-Host "Installing Azure-CLI"
winget install --exact --id Microsoft.AzureCLI

Write-Host "Running NLP parser..."
python .\parse_nlp.py

if (!(Test-Path ".env")) {
    Write-Host ".env file not generated by NLP. Check input or parser logic."
    exit 1
}

Write-Host ".env file created successfully."
Write-Host "`n Loading .env variables..."

$envVars = Get-Content ".env" | ForEach-Object {
    $parts = $_ -split "="
    @{ key = $parts[0]; value = $parts[1] }
}

$envHash = @{}
foreach ($item in $envVars) {
    $envHash[$item.key] = $item.value
}

$appType = $envHash["APP_TYPE"]
$cloudProvider = $envHash["CLOUD_PROVIDER"]

Write-Host "`n Application type: $appType"
Write-Host " Cloud provider: $cloudProvider"

# Initialize tfVarsContent empty
$tfVarsContent = ""

if ($cloudProvider -eq "aws") {
    Write-Host "Proceeding with AWS deployment..."
    $awsAccessKey = $envHash["AWS_ACCESS_KEY"]
    $awsSecretKey = $envHash["AWS_SECRET_KEY"]
    $keyName      = $envHash["KEY_NAME"]

    $tfVarsContent = @"
aws_access_key = "$awsAccessKey"
aws_secret_key = "$awsSecretKey"
key_name       = "$keyName"
"@
} elseif ($cloudProvider -eq "azure") {
    Write-Host "Logging in to Azure..."
    az login --use-device-code

    Write-Host "Getting subscription ID..."
    $subscriptionId = az account show --query id -o tsv
    Write-Host "Using subscription ID: $subscriptionId"
    $sshKeyPath = "$($env:USERPROFILE)\.ssh\id_rsa.pub"
    $sshKeyContent = Get-Content -Path $sshKeyPath -Raw
    $sshPublicKey = Get-Content "$env:USERPROFILE\.ssh\id_rsa.pub" -Raw

$tfVarsContent = @"
subscription_id = "$subscriptionId"
app_type = "$appType"
ssh_public_key = <<EOF
$sshPublicKey
EOF
"@


} else {
    Write-Host "Unsupported cloud provider"
    exit 1
}

$terraformDir = ".\infra\$cloudProvider"
if (!(Test-Path $terraformDir)) {
    Write-Host "Terraform config not found for $cloudProvider"
    exit 1
}

$tfVarsPath = Join-Path $terraformDir "terraform.tfvars"
Set-Content -Path $tfVarsPath -Value $tfVarsContent

Write-Host "`n Running Terraform for $cloudProvider..."
Push-Location $terraformDir
terraform init
terraform apply -auto-approve
$publicIp = terraform output -raw public_ip
Pop-Location

Write-Host "`nPublic IP of deployed VM: $publicIp"
Set-Content -Path ".\infra\public_ip.txt" -Value $publicIp

Set-Service -Name ssh-agent -StartupType Manual
Start-Service ssh-agent
ssh-add "$env:USERPROFILE\.ssh\id_rsa"

scp .\hello_flask\app.py azureuser@${publicIp}:/home/azureuser/app.py
$setupScript = @'
#!/bin/bash
set -e
sudo apt-get update -y
sudo apt-get install -y python3-pip
pip3 install flask
# Kill any previous python app running on port 5000 (optional cleanup)
fuser -k 5000/tcp || true
# Start the Flask app in background and redirect output to a log file
nohup python3 /home/azureuser/app.py > flask.log 2>&1 &
'@

$setupScriptPath = "$PSScriptRoot\setup.sh"

# Save script with UTF8 no BOM and Unix LF endings:
[System.IO.File]::WriteAllLines($setupScriptPath, $setupScript -split "`n", [System.Text.Encoding]::UTF8)

Write-Host "Setup script saved to $setupScriptPath"

# Copy the setup script to VM
scp $setupScriptPath azureuser@${publicIp}:/home/azureuser/setup.sh

# Run the setup script on VM
ssh azureuser@${publicIp} "sed -i 's/\r$//' /home/azureuser/setup.sh"
ssh azureuser@${publicIp} "sed -i 's/\r$//' /home/azureuser/setup.sh"
ssh azureuser@${publicIp} 'tail -c +4 /home/azureuser/setup.sh > /home/azureuser/setup_fixed.sh && mv /home/azureuser/setup_fixed.sh /home/azureuser/setup.sh'
ssh azureuser@${publicIp} 'bash /home/azureuser/setup.sh'
$out = "http://" + $publicIp + ":5000"
write-host $out